
package lsmichel.dev.wso2.isAdminWebserviceClient;

import java.net.MalformedURLException;
import java.net.URL;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "OAuth2TokenValidationService", targetNamespace = "http://oauth2.identity.carbon.wso2.org", wsdlLocation = "http://10.94.216.19:9763/services/OAuth2TokenValidationService?wsdl")
public class OAuth2TokenValidationService
    extends Service
{

    private final static URL OAUTH2TOKENVALIDATIONSERVICE_WSDL_LOCATION;
    private final static WebServiceException OAUTH2TOKENVALIDATIONSERVICE_EXCEPTION;
    private final static QName OAUTH2TOKENVALIDATIONSERVICE_QNAME = new QName("http://oauth2.identity.carbon.wso2.org", "OAuth2TokenValidationService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
        	

        	TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
                public void checkClientTrusted(X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }
        };
 
        // Install the all-trusting trust manager
        SSLContext sc = null;
		try {
			sc = SSLContext.getInstance("TLS");
		} catch (NoSuchAlgorithmException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        try {
			sc.init(null, trustAllCerts, new java.security.SecureRandom());
		} catch (KeyManagementException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        
        HostnameVerifier allHostsValid = new HostnameVerifier() {
            public boolean verify(String hostname, SSLSession session) {
                return true;
            }
        };
 
        // Install the all-trusting host verifier
        HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
        	
        	
            url = new URL("http://192.168.20.4/OAuth2TokenValidationService_1.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        OAUTH2TOKENVALIDATIONSERVICE_WSDL_LOCATION = url;
        OAUTH2TOKENVALIDATIONSERVICE_EXCEPTION = e;
    }

    public OAuth2TokenValidationService() {
        super(__getWsdlLocation(), OAUTH2TOKENVALIDATIONSERVICE_QNAME);
    }

    public OAuth2TokenValidationService(WebServiceFeature... features) {
        super(__getWsdlLocation(), OAUTH2TOKENVALIDATIONSERVICE_QNAME, features);
    }

    public OAuth2TokenValidationService(URL wsdlLocation) {
        super(wsdlLocation, OAUTH2TOKENVALIDATIONSERVICE_QNAME);
    }

    public OAuth2TokenValidationService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, OAUTH2TOKENVALIDATIONSERVICE_QNAME, features);
    }

    public OAuth2TokenValidationService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OAuth2TokenValidationService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns OAuth2TokenValidationServicePortType
     */
    @WebEndpoint(name = "OAuth2TokenValidationServiceHttpsSoap11Endpoint")
    public OAuth2TokenValidationServicePortType getOAuth2TokenValidationServiceHttpsSoap11Endpoint() {
        return super.getPort(new QName("http://oauth2.identity.carbon.wso2.org", "OAuth2TokenValidationServiceHttpsSoap11Endpoint"), OAuth2TokenValidationServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OAuth2TokenValidationServicePortType
     */
    @WebEndpoint(name = "OAuth2TokenValidationServiceHttpsSoap11Endpoint")
    public OAuth2TokenValidationServicePortType getOAuth2TokenValidationServiceHttpsSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://oauth2.identity.carbon.wso2.org", "OAuth2TokenValidationServiceHttpsSoap11Endpoint"), OAuth2TokenValidationServicePortType.class, features);
    }

    /**
     * 
     * @return
     *     returns OAuth2TokenValidationServicePortType
     */
    @WebEndpoint(name = "OAuth2TokenValidationServiceHttpsSoap12Endpoint")
    public OAuth2TokenValidationServicePortType getOAuth2TokenValidationServiceHttpsSoap12Endpoint() {
        return super.getPort(new QName("http://oauth2.identity.carbon.wso2.org", "OAuth2TokenValidationServiceHttpsSoap12Endpoint"), OAuth2TokenValidationServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OAuth2TokenValidationServicePortType
     */
    @WebEndpoint(name = "OAuth2TokenValidationServiceHttpsSoap12Endpoint")
    public OAuth2TokenValidationServicePortType getOAuth2TokenValidationServiceHttpsSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://oauth2.identity.carbon.wso2.org", "OAuth2TokenValidationServiceHttpsSoap12Endpoint"), OAuth2TokenValidationServicePortType.class, features);
    }

    /**
     * 
     * @return
     *     returns OAuth2TokenValidationServicePortType
     */
    @WebEndpoint(name = "OAuth2TokenValidationServiceHttpsEndpoint")
    public OAuth2TokenValidationServicePortType getOAuth2TokenValidationServiceHttpsEndpoint() {
        return super.getPort(new QName("http://oauth2.identity.carbon.wso2.org", "OAuth2TokenValidationServiceHttpsEndpoint"), OAuth2TokenValidationServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OAuth2TokenValidationServicePortType
     */
    @WebEndpoint(name = "OAuth2TokenValidationServiceHttpsEndpoint")
    public OAuth2TokenValidationServicePortType getOAuth2TokenValidationServiceHttpsEndpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://oauth2.identity.carbon.wso2.org", "OAuth2TokenValidationServiceHttpsEndpoint"), OAuth2TokenValidationServicePortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (OAUTH2TOKENVALIDATIONSERVICE_EXCEPTION!= null) {
            throw OAUTH2TOKENVALIDATIONSERVICE_EXCEPTION;
        }
        return OAUTH2TOKENVALIDATIONSERVICE_WSDL_LOCATION;
    }

}
